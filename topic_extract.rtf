{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl-380\pardirnatural\partightenfactor0

\f0\fs26 \cf2 def preprocess_text(corpus):\
    processed_corpus = []\
    english_words = set(nltk.corpus.words.words())\
    english_stopwords = set(stopwords.words('english'))\
    wordnet_lemmatizer = WordNetLemmatizer()\
    tokenizer = RegexpTokenizer(r'[A-Za-z|!]+')\
    for row in corpus:\
        sentences = []\
        word_tokens = tokenizer.tokenize(row)\
        word_tokens_lower = [t.lower() for t in word_tokens]\
        word_tokens_lower_english = [t for t in word_tokens_lower if t in english_words or not t.isalpha()]\
        word_tokens_no_stops = [t for t in word_tokens_lower_english if not t in english_stopwords]\
        word_tokens_no_stops_lemmatized = [wordnet_lemmatizer.lemmatize(t) for t in word_tokens_no_stops]\
        for word in word_tokens_no_stops_lemmatized:\
            if len(word) >= 2:\
                sentences.append(word)\
        processed_corpus.append(sentences)\
    return processed_corpus\
\
def pipline(processed_corpus):\
    dictionary = Dictionary(processed_corpus)\
    doc_term_matrix = [dictionary.doc2bow(listing) for listing in processed_corpus]\
    return dictionary, doc_term_matrix\
\
def lda_topic_model(doc_term_matrix,dictionary,num_topics = 3, passes = 2):\
    LDA = LdaModel\
    ldamodel = LDA(doc_term_matrix,num_topics = num_topics, id2word = dictionary, passes = passes)\
    return ldamodel\
\
def topic_feature(ldamodel,doc_term_matrix,df,new_col,num_topics):\
    docTopicProbMat = ldamodel[doc_term_matrix]\
    docTopicProbDf = pd.DataFrame(index = df.index, columns = range(0,num_topics))\
    for i,doc in enumerate(docTopicProbMat):\
        for topic in doc:\
            docTopicProbDf.iloc[i,topic[0]] = topic[1]\
    docTopicProbDf = docTopicProbDf.fillna(0)\
    docTopicProbDf[new_col] = docTopicProbDf.idxmax(axis=1)\
    df_topics = docTopicProbDf[new_col]\
    df_new = pd.concat([df,df_topics],axis = 1)\
    return df_new}